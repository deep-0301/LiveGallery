{"version":3,"sources":["firebase/config.js","hooks/useFileStore.js","comps/ImgGrid.js","comps/Modal.js","comps/Title.js","hooks/useStorage.js","comps/Progressbar.js","comps/UploadFrom.js","App.js","index.js"],"names":["firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","firebase","initializeApp","projectStorage","storage","projectFirestore","firestore","timestamp","FieldValue","serverTimestamp","useFilestore","collection","useState","docs","setDocs","useEffect","unsub","orderBy","onSnapshot","snap","documents","forEach","doc","push","data","id","ImageGrid","setSelectedImg","console","log","className","map","motion","div","key","layout","whileHover","opacity","onClick","url","img","src","alt","initial","animate","transition","delay","Modal","selectedImg","e","target","classList","contains","y","Title","useStorage","file","progress","setProgress","error","setError","setUrl","storageRef","ref","name","collectionRef","put","on","percentage","bytesTransferred","totalBytes","err","a","getDownloadURL","createdAt","add","Progressbar","setFile","width","UploadFrom","types","type","onChange","selected","files","includes","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.df9d2eab.chunk.js","sourcesContent":["import firebase from 'firebase/app';\r\nimport 'firebase/storage';\r\nimport 'firebase/firestore';\r\n\r\nvar firebaseConfig = {\r\n    apiKey: \"AIzaSyCmKHFPAxZL4wV9GJz3j4k5GrpjWirwcnc\",\r\n    authDomain: \"deep-galley.firebaseapp.com\",\r\n    projectId: \"deep-galley\",\r\n    storageBucket: \"deep-galley.appspot.com\",\r\n    messagingSenderId: \"355323663344\",\r\n    appId: \"1:355323663344:web:814e868301dde5220b4335\"\r\n};\r\n\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nconst projectStorage = firebase.storage();\r\nconst projectFirestore = firebase.firestore();\r\nconst timestamp = firebase.firestore.FieldValue.serverTimestamp;\r\n\r\nexport { projectStorage, projectFirestore, timestamp };\r\n\r\nexport default firebaseConfig;","import { useState, useEffect } from 'react'\r\nimport { projectFirestore } from '../firebase/config'\r\n\r\nconst useFilestore = (collection) => {\r\n    const [docs, setDocs] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const unsub = projectFirestore.collection(collection)\r\n            .orderBy('createdAt', 'desc')\r\n            .onSnapshot((snap) => {\r\n                let documents = [];\r\n                snap.forEach(doc => {\r\n                    documents.push({ ...doc.data(), id: doc.id });\r\n                });\r\n                setDocs(documents);\r\n            });\r\n        return () => unsub();\r\n    }, [collection])\r\n    return { docs };\r\n}\r\n\r\nexport default useFilestore;","import React from 'react';\r\nimport useFilestore from '../hooks/useFileStore'\r\nimport { motion } from 'framer-motion'\r\n\r\nconst ImageGrid = ({ setSelectedImg }) => {\r\n    const { docs } = useFilestore('images');\r\n    console.log(docs);\r\n    return (\r\n        <div className=\"img-grid\">\r\n            {docs && docs.map(doc => (\r\n\r\n                <motion.div className=\"img-wrap\" key={doc.id}\r\n                    layout\r\n                    whileHover={{ opacity: 1 }}\r\n                    onClick={() => setSelectedImg(doc.url)}\r\n                >\r\n                    <motion.img\r\n                        src={doc.url} alt='uploaded photos'\r\n                        initial={{ opacity: 0 }}\r\n                        animate={{ opacity: 1 }}\r\n                        transition={{ delay: 1 }}\r\n                    ></motion.img>\r\n                </motion.div>\r\n            ))\r\n            }\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default ImageGrid;\r\n","import React from 'react';\r\nimport { motion } from 'framer-motion'\r\nconst Modal = ({ selectedImg, setSelectedImg }) => {\r\n    const handleclick = (e) => {\r\n        if (e.target.classList.contains('backdrop'))\r\n            setSelectedImg(null);\r\n    }\r\n    return (\r\n        <>\r\n            <motion.div className='backdrop' onClick={handleclick}\r\n                initial={{ opacity: 0 }}\r\n                animate={{ opacity: 1 }}\r\n            >\r\n                <motion.img src={selectedImg} alt='enlarged image'\r\n                    initial={{ y: '-100vh' }}\r\n                    animate={{ y: '0' }}\r\n                ></motion.img>\r\n            </motion.div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Modal;","import React from 'react';\n\nconst Title = () => {\n  return (\n    <div className=\"title\">\n      <h1>FireGram</h1>\n      <h2>Your Pictures</h2>\n      <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p>\n    </div>\n  )\n}\n\nexport default Title;","import { useState, useEffect } from 'react';\r\nimport { projectStorage, projectFirestore, timestamp } from '../firebase/config';\r\n\r\nconst useStorage = (file) => {\r\n  const [progress, setProgress] = useState(0);\r\n  const [error, setError] = useState(null);\r\n  const [url, setUrl] = useState(null);\r\n\r\n  useEffect(() => {\r\n    // references\r\n    const storageRef = projectStorage.ref(file.name);\r\n    const collectionRef = projectFirestore.collection('images');\r\n    \r\n    storageRef.put(file).on('state_changed', (snap) => {\r\n      let percentage = (snap.bytesTransferred / snap.totalBytes) * 100;\r\n      setProgress(percentage);\r\n    }, (err) => {\r\n      setError(err);\r\n    }, async () => {\r\n      const url = await storageRef.getDownloadURL();\r\n      const createdAt = timestamp();\r\n      await collectionRef.add({ url, createdAt });\r\n      setUrl(url);\r\n    });\r\n  }, [file]);\r\n\r\n  return { progress, url, error };\r\n}\r\n\r\nexport default useStorage;","import React, { useEffect } from 'react';\r\nimport useStorage from '../hooks/useStorage'\r\nimport { motion } from 'framer-motion'\r\n\r\nconst Progressbar = ({ file, setFile }) => {\r\n    const { url, progress } = useStorage(file);\r\n\r\n    useEffect(() => {\r\n        if (url) {\r\n            setFile(null);\r\n        }\r\n    }, [url, setFile])\r\n\r\n    return (\r\n        <>\r\n            <motion.div className='progress-bar'\r\n                initial={{ width: 0 }}\r\n                animate={{ width: progress + '%' }}\r\n            >\r\n            </motion.div>\r\n        </>\r\n    )\r\n}\r\nexport default Progressbar;","import React, { Component, useState } from 'react';\r\nimport Progressbar from './Progressbar'\r\n\r\nconst UploadFrom = () => {\r\n\r\n    const [file, setFile] = useState(null)\r\n    const [error, setError] = useState(null)\r\n\r\n    const types = ['image/png', 'image/jpg', 'image/webp', 'image/jpeg']\r\n\r\n    const changeHandler = (e) => {\r\n        let selected = e.target.files[0];\r\n\r\n        if (selected && types.includes(selected.type)) {\r\n            setFile(selected);\r\n            setError('');\r\n        }\r\n        else {\r\n            setFile(null);\r\n            setError('please select an image file(png or jpg)');\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <form>\r\n                <label>\r\n                    <input type='file' onChange={changeHandler} />\r\n                    <span>+</span>\r\n                </label>\r\n                <div className='output'>\r\n                    {error && <div className='error'>{error}</div>}\r\n                    {file && <div>{file.name}</div>}\r\n                    {file && <Progressbar file={file} setFile={setFile} />}\r\n\r\n                </div>\r\n            </form>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default UploadFrom;","import React, { useState } from 'react';\nimport ImageGrid from './comps/ImgGrid';\nimport Modal from './comps/Modal';\nimport Title from './comps/Title';\nimport UploadFrom from './comps/UploadFrom';\n\nconst App = () => {\n  const [selectedImg, setSelectedImg] = useState(null);\n  return (\n    <div className=\"App\">\n      <Title />\n      <UploadFrom />\n      <ImageGrid setSelectedImg={setSelectedImg} />\n      {selectedImg && <Modal selectedImg={selectedImg} setSelectedImg={setSelectedImg} />}\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA"],"sourceRoot":""}